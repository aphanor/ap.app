{
  "author": {
    "name": "mklabs"
  },
  "name": "tiny-lr",
  "description": "Tiny LiveReload server, background-friendly",
  "version": "0.1.6",
  "homepage": "https://github.com/mklabs/tiny-lr",
  "bugs": {
    "url": "https://github.com/mklabs/tiny-lr/issues"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/mklabs/tiny-lr.git"
  },
  "main": "./lib",
  "scripts": {
    "prepublish:": "npm test",
    "test": "mocha --reporter spec test/wd test",
    "test-debug": "DEBUG=tinylr:* mocha --reporter list",
    "test-debug-all": "DEBUG=* mocha --reporter list",
    "pretest": "npm run phantom-start",
    "posttest": "npm run phantom-stop",
    "phantom-start": "sh scripts/phantom-start",
    "phantom-stop": "sh scripts/phantom-stop",
    "serve": "node examples/express/server.js",
    "post-change": "sh scripts/post-change",
    "get-change": "curl http://localhost:35729/changed?files=site.css"
  },
  "dependencies": {
    "body-parser": "~1.8.0",
    "debug": "~2.0.0",
    "faye-websocket": "~0.7.2",
    "livereload-js": "^2.2.0",
    "parseurl": "~1.3.0",
    "qs": "~2.2.3"
  },
  "devDependencies": {
    "connect": "^2.14.5",
    "express": "^4.1.1",
    "mocha": "^1.18.2",
    "phantomjs": "^1.9.7-5",
    "request": "^2.34.0",
    "supertest": "^0.12.0",
    "wd": "^0.2.21"
  },
  "config": {
    "test_port": "9001"
  },
  "license": "MIT",
  "readme": "# tiny-lr [![Build Status](https://travis-ci.org/mklabs/tiny-lr.svg?branch=master)](https://travis-ci.org/mklabs/tiny-lr)\r\n\r\nThis script manages a tiny [LiveReload](http://livereload.com/) server\r\nimplementation.\r\n\r\n[![NPM](https://nodei.co/npm/tiny-lr.png?downloads=true&stars=true)](https://nodei.co/npm/tiny-lr/)\r\n\r\nIt exposes an HTTP server and express middleware, with a very basic REST\r\nApi to notify the server of a particular change.\r\n\r\nIt doesn't have any watch ability, it must be done at the build process or\r\napplication level.\r\n\r\nInstead, it exposes a very simple API to notify the server that some\r\nchanges have been made, then broadcasted to every livereload client\r\nconnected.\r\n\r\n    # notify a single change\r\n    curl http://localhost:35729/changed?files=style.css\r\n\r\n    # notify using a longer path\r\n    curl http://localhost:35729/changed?files=js/app.js\r\n\r\n    # notify multiple changes, comma or space delimited\r\n    curl http://localhost:35729/changed?files=index.html,style.css,docs/docco.css\r\n\r\nOr you can bulk the information into a POST request, with body as a JSON array of files.\r\n\r\n    curl -X POST http://localhost:35729/changed -d '{ \"files\": [\"style.css\", \"app.js\"] }'\r\n\r\n    # from a JSON file\r\n    node -pe 'JSON.stringify({ files: [\"some.css\", \"files.css\"] })' > files.json\r\n    curl -X POST -d @files.json http://localhost:35729\r\n\r\nAs for the livereload client, you need to install the browser extension:\r\nhttp://feedback.livereload.com/knowledgebase/articles/86242-how-do-i-install-and-use-the-browser-extensions-\r\n(**note**: you need to listen on port 35729 to be able to use with your\r\nbrower extension)\r\n\r\nor add the livereload script tag manually:\r\nhttp://feedback.livereload.com/knowledgebase/articles/86180-how-do-i-add-the-script-tag-manually-\r\n(and here you can choose whatever port you want)\r\n\r\n## Integration\r\n\r\nThe best way to integrate the runner in your workflow is to add it as a `reload`\r\nstep within your build tool.\r\n\r\n```js\r\nvar tinylr = require('tiny-lr');\r\n\r\n// standard LiveReload port\r\nvar port = 35729;\r\n\r\n// tinylr(opts) => new tinylr.Server(opts);\r\ntinylr().listen(port, function() {\r\n  console.log('... Listening on %s ...', port);\r\n})\r\n```\r\n\r\nYou can define your own route and listen for specific request:\r\n\r\n```js\r\nvar server = tinylr();\r\n\r\nserver.on('GET /myplace', function(req, res) {\r\n  res.write('Mine');\r\n  res.end();\r\n})\r\n```\r\n\r\nAnd stop the server manually:\r\n\r\n```js\r\nserver.close();\r\n```\r\n\r\nThis will close any websocket connection established and emit a close event.\r\n\r\n### Middleware\r\n\r\nTo use as a connect / express middleware, tiny-lr needs query /\r\nbodyParser middlewares prior in the stack (to handle POST requests)\r\n\r\nAny handled requests ends at the tinylr level, not found and errors are\r\nnexted to the rest of the stack.\r\n\r\n```js\r\nvar port = process.env.LR_PORT || process.env.PORT || 35729;\r\n\r\nvar path    = require('path');\r\nvar express = require('express');\r\nvar tinylr  = require('tiny-lr');\r\nvar body    = require('body-parser');\r\n\r\nvar app = express();\r\n\r\n// This binds both express app and tinylr on the same port\r\n\r\n\r\napp\r\n  .use(body())\r\n  .use(tinylr.middleware({ app: app }))\r\n  .use(express.static(path.resolve('./')))\r\n  .listen(port, function() {\r\n    console.log('listening on %d', port);\r\n  });\r\n```\r\n\r\nThe port you listen on is important, and tinylr should **always** listen on\r\nthe LiveReload standard one: `35729`. Otherwise, you won't be able to rely\r\non the browser extensions, though you can still use the manual snippet\r\napproach.\r\n\r\nYou can also start two different servers, one on your app port, the\r\nother listening on the LiveReload port.\r\n\r\n### Using grunt\r\n\r\nHead over to [https://github.com/gruntjs/grunt-contrib-watch](https://github.com/gruntjs/grunt-contrib-watch#live-reloading)\r\n\r\n### Using make\r\n\r\nSee [make-livereload](https://github.com/mklabs/make-livereload) repo.\r\nThis repository defines a bin wrapper you can use and install with:\r\n\r\n    npm install make-livereload -g\r\n\r\nIt bundles the same bin wrapper previously used in tiny-lr repo.\r\n\r\n    Usage: tiny-lr [options]\r\n\r\n    Options:\r\n\r\n      -h, --help     output usage information\r\n      -V, --version  output the version number\r\n      port           -p\r\n      pid            Path to the generated PID file (default: ./tiny-lr.pid)\r\n\r\n### Using gulp\r\n\r\nSee [gulp-livereload](https://github.com/vohof/gulp-livereload) repo.\r\n\r\n## Options\r\n\r\n- `livereload`    - Path to the client side lib (defaults to `path.join(__dirname, '../node_modules/livereload-js/dist/livereload.js')`)\r\n- `port`          - Livereload port (defaults to `35729`)\r\n- `errorListener` - A callback to invoke when an error occurs (otherwise, fallbacks to standard error output)\r\n- `app`           - An express or other middleware based HTTP server\r\n- `key`           - Option to pass in to create an https server\r\n- `cert`          - Option to pass in to create an https server\r\n- `pfx`           - Can also be used to create an https server instead of `key` & `cert`\r\n- `liveCSS`       - LiveReload option to enable live CSS reloading (defaults to true)\r\n- `liveJs`        - LiveReload option to enable live JS reloading (defaults to true)\r\n- `liveImg`       - LiveReload option to enable live images reloading (defaults to true)\r\n\r\n## Tests\r\n\r\n    npm test\r\n\r\n---\r\n\r\n\r\n# TOC\r\n   - [tiny-lr](#tiny-lr)\r\n     - [GET /](#tiny-lr-get-)\r\n     - [GET /changed](#tiny-lr-get-changed)\r\n     - [POST /changed](#tiny-lr-post-changed)\r\n     - [GET /livereload.js](#tiny-lr-get-livereloadjs)\r\n     - [GET /kill](#tiny-lr-get-kill)\r\n<a name=\"\" />\r\n\r\n<a name=\"tiny-lr\" />\r\n# tiny-lr\r\naccepts ws clients.\r\n\r\n```js\r\nvar url = parse(this.request.url);\r\nvar server = this.app;\r\n\r\nvar ws = this.ws = new WebSocket('ws://' + url.host + '/livereload');\r\n\r\nws.onopen = function(event) {\r\n  var hello = {\r\n    command: 'hello',\r\n    protocols: ['http://livereload.com/protocols/official-7']\r\n  };\r\n\r\n  ws.send(JSON.stringify(hello));\r\n};\r\n\r\nws.onmessage = function(event) {\r\n  assert.deepEqual(event.data, JSON.stringify({\r\n    command: 'hello',\r\n    protocols: ['http://livereload.com/protocols/official-7'],\r\n    serverName: 'tiny-lr'\r\n  }));\r\n\r\n  assert.ok(Object.keys(server.clients).length);\r\n  done();\r\n};\r\n```\r\n\r\nproperly cleans up established connection on exit.\r\n\r\n```js\r\nvar ws = this.ws;\r\n\r\nws.onclose = done.bind(null, null);\r\n\r\nrequest(this.server)\r\n  .get('/kill')\r\n  .expect(200, function() {\r\n    console.log('server shutdown');\r\n  });\r\n```\r\n\r\n<a name=\"tiny-lr\" />\r\n# tiny-lr\r\n<a name=\"tiny-lr-get-\" />\r\n## GET /\r\nrespond with nothing, but respond.\r\n\r\n```js\r\nrequest(this.server)\r\n  .get('/')\r\n  .expect('Content-Type', /json/)\r\n  .expect('{\"tinylr\":\"Welcome\",\"version\":\"0.0.1\"}')\r\n  .expect(200, done);\r\n```\r\n\r\nunknown route respond with proper 404 and error message.\r\n\r\n```js\r\nrequest(this.server)\r\n  .get('/whatev')\r\n  .expect('Content-Type', /json/)\r\n  .expect('{\"error\":\"not_found\",\"reason\":\"no such route\"}')\r\n  .expect(404, done);\r\n```\r\n\r\n<a name=\"tiny-lr-get-changed\" />\r\n## GET /changed\r\nwith no clients, no files.\r\n\r\n```js\r\nrequest(this.server)\r\n  .get('/changed')\r\n  .expect('Content-Type', /json/)\r\n  .expect(/\"clients\":\\[\\]/)\r\n  .expect(/\"files\":\\[\\]/)\r\n  .expect(200, done);\r\n```\r\n\r\nwith no clients, some files.\r\n\r\n```js\r\nrequest(this.server)\r\n  .get('/changed?files=gonna.css,test.css,it.css')\r\n  .expect('Content-Type', /json/)\r\n  .expect('{\"clients\":[],\"files\":[\"gonna.css\",\"test.css\",\"it.css\"]}')\r\n  .expect(200, done);\r\n```\r\n\r\n<a name=\"tiny-lr-post-changed\" />\r\n## POST /changed\r\nwith no clients, no files.\r\n\r\n```js\r\nrequest(this.server)\r\n  .post('/changed')\r\n  .expect('Content-Type', /json/)\r\n  .expect(/\"clients\":\\[\\]/)\r\n  .expect(/\"files\":\\[\\]/)\r\n  .expect(200, done);\r\n```\r\n\r\nwith no clients, some files.\r\n\r\n```js\r\nvar data = { clients: [], files: ['cat.css', 'sed.css', 'ack.js'] };\r\n\r\nrequest(this.server)\r\n  .post('/changed')\r\n  .send({ files: data.files })\r\n  .expect('Content-Type', /json/)\r\n  .expect(JSON.stringify(data))\r\n  .expect(200, done);\r\n```\r\n\r\n<a name=\"tiny-lr-get-livereloadjs\" />\r\n## GET /livereload.js\r\nrespond with livereload script.\r\n\r\n```js\r\nrequest(this.server)\r\n  .get('/livereload.js')\r\n  .expect(/LiveReload/)\r\n  .expect(200, done);\r\n```\r\n\r\n<a name=\"tiny-lr-get-kill\" />\r\n## GET /kill\r\nshutdown the server.\r\n\r\n```js\r\nvar server = this.server;\r\nrequest(server)\r\n  .get('/kill')\r\n  .expect(200, function(err) {\r\n    if(err) return done(err);\r\n    assert.ok(!server._handle);\r\n    done();\r\n  });\r\n```\r\n\r\n## Thanks!\r\n\r\n- Tiny-lr is a [LiveReload](http://livereload.com/) implementation. They\r\n  really made frontend editing better for a lot of us. They have a\r\n  [LiveReload App on the Mac App Store](https://itunes.apple.com/us/app/livereload/id482898991)\r\n  you might want to check out.\r\n\r\n- To all [contributors](https://github.com/mklabs/tiny-lr/graphs/contributors)\r\n\r\n- [@FGRibreau](https://github.com/FGRibreau) / [pid.js\r\n  gist](https://gist.github.com/1846952)) for the background friendly\r\nbin wrapper, used in [make-livereload](https://github.com/mklabs/make-livereload)\r\n",
  "readmeFilename": "readme.md",
  "_id": "tiny-lr@0.1.6",
  "dist": {
    "shasum": "a6997787b28c0f9027b3752ca0b9293d4b5e1719"
  },
  "_from": "tiny-lr@^0.1.5",
  "_resolved": "https://registry.npmjs.org/tiny-lr/-/tiny-lr-0.1.6.tgz"
}
